// GLOBAL VARIABLES
global alloc, fallback, fragmenting = 0, cont = 0
global interval = 1000
global min_relevant = 10

global who, arr

probe kernel.trace("mm_page_alloc_extfrag") {
    cont++
    arr[execname(), pid(), pexecname(), ppid(), uid()] <<< 1
    alloc = $alloc_order
    fallback = $fallback_order
    if (fallback < alloc) {
        fragmenting++
    }
    if (cont == interval) {
        reduce()
        cont = 0
    }
}

// Function to reduce data and retain relevant occurrences
function reduce() {
    foreach([process, pid, pexecname, ppid, uid] in arr)
        if (@count(arr[process, pid, pexecname, ppid, uid]) >= min_relevant)
            who[process, pid, pexecname, ppid, uid] <<< @count(arr[process, pid, pexecname, ppid, uid]);
    delete arr
}

// Probe executed at the beginning
probe begin {
    printf("\nProbing...\n")
}

// Probe executed at the end
probe end {
    reduce()  // Final reduction before printing
    printf("Process,Parent,occurrences\n")
    // Iterate through 'who' array and print process information and print data for the relevant occurrences
    foreach([process, pid, pexecname, ppid, uid] in who)
        printf("%s(%d),%s(%d),%d,%d\n", process, pid, pexecname, ppid, uid, @sum(who[process, pid, pexecname, ppid, uid]));
    printf("occurrence: %d\n", fragmenting)
}